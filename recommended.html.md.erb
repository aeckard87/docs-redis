---
title: Redis for PCF Recommended Usage and Limitations
owner: London Services
---

## Recommended Use Cases

Redis for PCF can be used as a datastore or cache.
On-Demand plans, introduced in Redis for PCF v1.8, are designed for cache use cases.
Dedicated-VM and Shared-VM plans are configured with `maxmemory-policy = noeviction` and RDB and AOF persistence.

Redis can be used in many different ways, including:

* Key/value store for strings and more complex data structures including Hashes, Lists, Sets, Sorted Sets
* Session cache - persistence enables preservation of state
* Full page cache - persistence enables preservation of state
* Database cache - cache queries
* Data ingestion - because Redis is in memory it can ingest data very quickly
* Message Queues - list and set operations. `PUSH`, `POP`, and blocking queue commands.
* Leaderboards/Counting - increments and decrements of sets and sorted sets using `ZRANGE`, `ZADD`, `ZREVRANGE`, `ZRANK`, `INCRBY`, `GETSET`
* Pub/Sub - built in publish and subscribe operations - `PUBLISH`, `SUBSCRIBE`, `UNSUBSCRIBE`

## Service Plan Recommended Usage and Limitations

### On-Demand Plans
* Each on-demand plan instance is deployed to its own VM and is suitable for production workloads.
* The maximum-number of on-demand plan instances available to developers is set by the operator and enforced on both a global and per-plan level quota.
* Select Redis configurations can be changed from default.
* The default `maxmemory` policy is `allkeyslru` and can be updated for other cache policies.
* Operators can update the plan settings, including the VM size, disk size and Redis configuration settings, after the plans have been created. **Operators should not downsize the VMs or disk size as this can cause data loss in pre-existing instances.**

#### Resource Useage Planning

<p class="note">
Redis On-Demand plans use dedicated VM and disks, which will consume IaaS resources. Operators can set global and plan quotas, but resource usage will vary based on number of On-Demand instances provisioned by App Developers.
</p>

On-Demand resource usage is managed by both plan and global quotas. Once the number of instances equates the global quota set on your 'On Demand Service Settings' page, no new instances can be provisioned even if the plan quota has not yet been reached. This means that your resource usage can vary as the number and type of instances provisioned changes.

To calculate the maximum IaaS cost/ usage you have configured:

1. For the plan using the largest VM and Disk size, multiply the resource by the quota stated on the plan page.For example, if the plan is using `m4.xlarge` and the plan quota is 10 with a global quota of 15, at most you would be using 10 `m4.xlarge` instances.  If the plan level quota exceeds the global quota, instead multiple the resource by the global quota as this quota supercedes all other quotas.
1. If (Global Quota - Large Plan Quota) > 0, navigate to the plan using the next largest VM and disk size and multiply the number of remaining instances (Global Quota - Large Plan Quota) by that resource. Continuing from the example above, if the plan is using `m3.medium` and the plan quota is 10 with a global quota of 15, at most you would be using 5 `m3.medium` instances.
1. Continue this process until the instances provisioned have reached the Global Quota.

To calculate the current IaaS cost/ usage across On-Demand plans:

1. Current useage can be found by looking at the service broker metrics as [documented here](monitoring.html)
1. Multiple the `total_instances` for each plan by that plan's resources.

### Dedicated-VM Plan

* Each dedicated VM plan instances is deployed to its own VM and is suitable for production workloads.
* The number of Dedicated-VM plan instances available to developers is set by the operator. Configurations of up to 100 Dedicated-VM plan instances have been tested.
* No ability to change the Redis configuration. The `CONFIG` command is disabled.
* Cannot scale down the number of VMs on the plan once deployed.
* Cannot scale down the size of VMs on the plan once deployed (this protects against data loss).
* The default maximum number of connections, maxclients, is set at 10000 but this number is adjusted by Redis according to the number of file handles available.

### Shared-VM Plan

* The Shared-VM plan does not manage 'noisy neighbor' problems so it is not recommended for production apps.
* The number of Shared VM instances available to developers is set by the operator. The maximum number of shared VM instances is relative to the memory allocated to each Shared VM instance and the total memory of the Redis service broker. Please see [Configuring Service Plans](./installing.html#service-plans) for more detail.
* It cannot be scaled beyond a single virtual machine.
* The following commands are disabled: `CONFIG`, `MONITOR`, `SAVE`, `BGSAVE`,
  `SHUTDOWN`, `BGREWRITEAOF`, `SLAVEOF`, `DEBUG`, and `SYNC`.
* Constraining CPU and/or disk usage is not supported.
* The default maximum number of connections, maxclients, is set at 10000 but this number is adjusted by Redis according to the number of file handles available.

## Availability Using Multiple AZs

Redis for PCF 1.8 supports configuring multiple availability zones but this configuration does not provide high availability.

## Downtime During Redeploys

Redeploying PCF Redis for configuration changes or upgrades will result in Redis being inaccessible to apps for a brief period of time.

## Redis Key Count and Memory Size

Redis can handle up to 2<sup>32</sup> keys, and was tested in practice to handle at least 250 million keys per instance.
Every hash, list, set, and sorted set, can hold 2<sup>32</sup> elements.
VM memory is more likely to be a limiting factor than number of keys that can be handled.
