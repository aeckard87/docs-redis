---
title: Troubleshooting On-Demand Redis
owner: London Services Enablement
---

This topic provides operators with basic instructions for troubleshooting on-demand Redis for Pivotal Cloud Foundry (PCF).
Please refer to our [previous documentation](https://docs.pivotal.io/redis/1-7/troubleshooting.html) for troubleshooting the p-redis service (including Dedicated-VMs and Shared-VM Services)

## <a id="errors"></a>Troubleshooting Errors

Start here if you're responding to a specific errors or error messages.

### <a id="install-fail"></a>Failed Install

<%= partial '../../redis/odb/tshoot-err-install-fail' %>

### <a id="cannot-create-delete"></a>Cannot Create or Delete Service Instances

<%= partial '../../redis/odb/tshoot-err-cannot-create-delete' %>

### <a id="timeouts"></a>Broker Request Timeouts

<%= partial '../../redis/odb/tshoot-err-timeouts' %>

### <a id="cannot-bind"></a>Cannot Bind to or Unbind from Service Instances

#### <a id="instance-not-exist"></a>Instance Does Not Exist

<%= partial '../../redis/odb/tshoot-err-instance-not-exist' %>

#### <a id="other-errors"></a>Other Errors

<%= partial '../../redis/odb/tshoot-err-other-errors' %>

### <a id="cannot-connect"></a>Cannot Connect to a Service Instance

<%= partial '../../redis/odb/tshoot-err-cannot-connect' %>

### <a id="upgrade-all-fails"></a>Upgrade All Instances Fails

<%= partial '../../redis/odb/tshoot-err-upgrade-all-fails' %>

### <a id="missing-logs"></a>Missing Logs and Metrics

<%= partial '../../redis/odb/tshoot-err-missing-logs' %>

## <a id="components"></a>Troubleshooting Components

Guidance on checking for and fixing issues in on-demand service components.

### <a id="bosh"></a>BOSH problems

#### <a id="no-bosh-uuid"></a>Missing BOSH Director UUID

<%= partial '../../redis/odb/tshoot-comp-no-bosh-uuid' %>

#### <a id="large-queue"></a>Large BOSH Queue

<%= partial '../../redis/odb/tshoot-comp-large-queue' %>

### <a id="bosh-config"></a>Configuration

#### <a id="bosh-instance-fail"></a>Service instances in failing state

<%= partial '../../redis/odb/tshoot-comp-bosh-instance-fail' %>

### <a id="auth"></a>Authentication

#### <a id="uaa-change"></a>UAA Changes

<%= partial '../../redis/odb/tshoot-comp-uaa-change' %>

### <a id="network"></a>Networking

<%= partial '../../redis/odb/tshoot-comp-network' %>

#### <a id="broker-to-instances"></a>Validate Service Broker Connectivity to Service Instances

<%= partial '../../redis/odb/tshoot-comp-broker-to-instances' %>

#### <a id="app-to-instances"></a>Validate App Access to Service Instance

<%= partial '../../redis/odb/tshoot-comp-app-to-instances' %>

### <a id="quotas"></a>Quotas

#### <a id="plan-quotas"></a>Plan Quota issues

<%= partial '../../redis/odb/tshoot-comp-plan-quotas' %>

#### <a id="global-quotas"></a>Global Quota Issues

<%= partial '../../redis/odb/tshoot-comp-global-quotas' %>

#### <a id="failing-jobs"></a>Failing Jobs and Unhealthy Instances

<%= partial '../../redis/odb/tshoot-comp-failing-jobs' %>

## <a id="techniques"></a>Techniques for Troubleshooting

Instructions on interacting with the on-demand service broker and on-demand service instance BOSH deployments, and on performing general maintenance and housekeeping tasks

### <a id="parse-error"></a>Parse a Cloud Foundry (CF) Error Message

Failed operations (create, update, bind, unbind, delete) result in an error message. You can retrieve the error message later by running the cf CLI command `cf service INSTANCE-NAME`.

<pre class="terminal">
$ cf service myservice

Service instance: myservice
Service: super-db
Bound apps:
Tags:
Plan: dedicated-vm
Description: Dedicated Instance
Documentation url:
Dashboard:

Last Operation
Status: create failed
Message: Instance provisioning failed: There was a problem completing your request.
     Please contact your operations team providing the following information:
     service: redis-acceptance,
     service-instance-guid: ae9e232c-0bd5-4684-af27-1b08b0c70089,
     broker-request-id: 63da3a35-24aa-4183-aec6-db8294506bac,
     task-id: 442,
     operation: create
Started: 2017-03-13T10:16:55Z
Updated: 2017-03-13T10:17:58Z
</pre>

Use the information in the `Message` field to debug further. Provide this information to Pivotal Support when filing a ticket.

The `task-id` field maps to the BOSH task id. For further information on a failed BOSH task, use the `bosh task TASK-ID` command in the BOSH CLI.

The `broker-request-guid` maps to the portion of the On-Demand Broker log containing the failed step. Access the broker log through your syslog aggregator, or access BOSH logs for the broker by typing `bosh logs redis-on-demand-broker 0`. If you have more than one broker instance, repeat this process for each instance.

### <a id="bosh-cf-access"></a>Access Broker and Instance Logs and VMs

<%= partial '../../redis/odb/tshoot-tech-bosh-cf-access' %>

### <a id="access-broker"></a>Access Broker Logs and VM(s)

<%= partial '../../redis/odb/tshoot-tech-access-broker' %>

### <a id="access-instance"></a>Access Service Instance Logs and VMs

<%= partial '../../redis/odb/tshoot-tech-access-instance' %>

### <a id="broker-errands"></a>Run Service Broker Errands to Manage Brokers and Instances

From the BOSH CLI, you can run service broker errands that manage the service brokers and perform mass operations on the service instances that the brokers created. These service broker errands include:

* [`register-broker`](#register-broker) registers a broker with the Cloud Controller and lists it in the Marketplace
* [`deregister-broker`](#deregister-broker) deregisters a broker with the Cloud Controller and removes it from the Marketplace
* [`upgrade-all-service-instances`](#upgrade-all) upgrades existing instances of a service to its latest installed version
* [`delete-all-service-instances`](#delete-all) deletes all instances of service

Before running any of these errands, set the service broker manifest in the BOSH CLI by doing the following:

  1. Run `bosh deployments`.
  1. In the **Name** column of the output, look or `grep` for a string of the form `p-rabbit-GUID`. This is the unique identifier for the broker in BOSH.
  1. Run `bosh download manifest RABBIT-BROKER-GUID BROKER-MANIFEST.yml` with the unique string from the previous step and any filename you want to give the broker deployment manifest.
  1. Run `bosh deployment BROKER-MANIFEST.yml` to select the broker deployment as the one to run broker errands against.

#### <a id="register-broker"></a>Register Broker

<%= partial '../../redis/odb/tshoot-tech-register-broker' %>

#### <a id="deregister-broker"></a>Deregister Broker

<%= partial '../../redis/odb/tshoot-tech-deregister-broker' %>

#### <a id="upgrade-all"></a>Upgrade All Service Instances

If you have made changes to the plan definition or uploaded a new tile into OpsManager you may want to upgrade all <%=vars.service_name_article_full%> instances to the latest software / plan definition.

To do this you can either select the errand through the OpsManager UI and have this happen along with the `apply-changes` action or run the errand directly with the command `bosh run errand upgrade-all-service-instances` after you have selected the broker deployment with `bosh deployment`.

The errand does the following:

- Collects all of the service instances the on-demand broker has registered.
- For each instance the errand serially:
  - Issues an upgrade command to the on-demand broker.
  - Re-generates the service instance manifest based on its latest configuration from the tile.
  - Deploys the new manifest for the service instance.
  - Waits for this operation to complete, then proceeds to the next instance.
- Adds to a retry list any instances that have ongoing BOSH tasks at the time of upgrade.
- Retries any instances in the retry list until all are upgraded.

<p class="note"><strong>Note</strong>:
  If the operator has made plan config changes but has not run the `upgrade-all-service-instances` errand, because they want to do it at a later time,
  and an app developer attempts `cf update-service -c {key: value}` before the upgrade happens they will see:
  <code>
    There is a pending change to your service instance, you must first run cf update-service <service_name> -c '{"apply-changes": true}', no other arbitrary parameters are allowed
  </code>
</p>

#### <a id="delete-all"></a>Delete All Service Instances

<%= partial '../../redis/odb/tshoot-tech-delete-all' %>

### <a id="detect-orphans"></a>Orphaned Service Instances

A service instance is defined as ‘orphaned’ when the BOSH deployment for the instance is still running, but the service is no longer registered in Cloud Foundry.

To clean up orphaned instances, perform the following action on each:
<pre class="terminal">
$ bosh delete deployment SERVICE-INSTANCE-GUID
</pre>
<p class="note warning">
<strong>WARNING: </strong> This may leave IaaS resources in an unusable state.
</p>

### <a id="instance-deployment"></a>Select the BOSH Deployment for a Service Instance

<%= partial '../../redis/odb/tshoot-tech-instance-deployment' %>

### <a id="instance-creds"></a>Get Admin Credentials for a Service Instance

<%= partial '../../redis/odb/tshoot-tech-instance-creds' %>

### <a id="view-resources"></a>View Resource Saturation and Scaling

<%= partial '../../redis/odb/tshoot-tech-view-resources' %>

### <a id="id-instance-owner"></a>Identify Service Instance Owner

<%= partial '../../redis/odb/tshoot-tech-id-instance-owner' %>

### <a id="monitor-quota"></a>Monitor Quota Saturation and Service Instance Count

<%= partial '../../redis/odb/tshoot-tech-monitor-quota' %>

## <a id="kb"></a>Knowledge Base (Community)

<%= partial '../../redis/odb/tshoot-kb' %>

## <a id="support"></a>File a Support Ticket

<%= partial '../../redis/odb/tshoot-support' %>
