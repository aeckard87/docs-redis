---
title: Provisioning Redis instances on demand
owner: London Services
---

Version 1.8 of PCF Redis introduces on-demand provisioning of Redis instances based on the [On-Demand Services SDK](http://docs.pivotal.io/on-demand-service-broker/). This enables an App Developer to create a Redis instance as needed from the CF CLI through the `cf create-service` command. The Operator configures the plan options available to the App Developers.

Prior to PCF Redis 1.8.0, Redis for PCF offers Dedicated-VM and Shared-VM plans. This means that an Operator needs to specify at install time how many dedicated VM Redis instances to create.

The improved flexibility in how and when instances are created allows for more efficient and seamless resource use for both Operator and App Developer.

## <a id="service"></a>On Demand Service Plan Descriptions

PCF Redis offers three on-demand plans as the p.redis service within the PCF Redis tile. Below is a description of each plan as it appears in the cf marketplace and its intended use case.

* **Small Cache Plan**- A Redis instance deployed to a dedicated VM, suggested to be configured with ~2&nbsp;GB of memory and >10&nbsp;GB of persistent disk.
* **Medium Cache Plan** - A Redis instance deployed to a dedicated VM, suggested to be configured with ~2&nbsp;GB of memory and >10&nbsp;GB of persistent disk.
* **Large Cache**- A Redis instance deployed to a dedicated VM, suggested to be configured with ~4&nbsp;GB of memory and >14&nbsp;GB of persistent disk.

For each service plan, the operator can configure the **Plan name**, **Plan description**, **Server VM type** and **Server Disk type**, or choose to disable the plan completely.

## Additional Redis Configurations

The operator can configure further properties per plan beyond memory and disk sizes. Appropriate defaults have been pre-configured according to the memory/disk size of each plan.

Operators can update certain plan settings after the plans have been created.
If the Operator updates the VM size, disk size, or the Redis configuration settings (enabling Lua Scripting, max-clients, timeout and TCP keep-alive), these settings will be implemented in all instances already created. Operators should not downsize the VMs or disk size as this can cause data loss in pre-existing instances.

<table border="1" class="nice">
  <tr>
    <th>Property</th>
    <th>Default</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>Redis Client Timeout</td>
    <td>3600</td>
    <td>Server timeout for an idle client specified in seconds (e.g., 3600).</td>
  </tr>
  <tr>
    <td>Redis TCP Keepalive</td>
    <td>60</td>
    <td>The max number of connected clients at the same time.</td>
  </tr>
  <tr>
    <td>Max Clients</td>
    <td>1000/5000/10000 (small/medium/large)</td>
    <td>The max number of connected clients at the same time.</td>
  </tr>
  <tr>
    <td>Lua Scripting</td>
    <td>Enabled</td>
    <td>Enable/Disable Lua scripting</td>
  </tr>
  <tr>
    <td>Plan Quota</td>
    <td>20</td>
    <td>Maximum number of Redis service instances for this plan, across all orgs and spaces.</td>
  </tr>
</table>

Application Developers can configure their Redis instances with arbitrary parameters. Please view <a href="https://redis.io/commands">the Redis documentation</a> for more detail.

<table border="1" class="nice">
  <tr>
    <th>Property</th>
    <th>Default</th>
    <th>Options</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>maxmemory-policy</code></td>
    <td><code>allkeys-lru</code></td>
    <td><code>allkeys-lru</code>, <code>noeviction</code>, <code>volatile-lru</code>, <code>allkeys-random</code>, <code>volatile-ttl</code></td>
    <td>Mandatory parameter. Sets the behavior Redis follows when `maxmemory` is reached</td>
  </tr>
  <tr>
    <td><code>notify-keyspace-events</code></td>
    <td>""</td>
    <td>Set a combination of the following characters (e.g., "Elg"): K, E, g, $, l, s, h, z, x, e, A</td>
    <td>Sets the keyspace notifications for events that affect the Redis data set</td>
  </tr>
  <tr>
    <td><code>slowlog-log-slower-than</code></td>
    <td>10000</td>
    <td>0-20000</td>
    <td>Sets the threshhold execution time (seconds). Commands that exceed this execution time are added to the slowlog.</td>
  </tr>
  <tr>
    <td><code>slowlog-max-len</code></td>
    <td>128</td>
    <td>1-2024</td>
    <td>Sets the length (count) of the slowlog queue.</td>
  </tr>
</table>
