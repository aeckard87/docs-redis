---
title: For App Developers
owner: London Services
---

<strong><%= modified_date %></strong>

##  <a id="config"></a>Redis Configuration

For On-Demand plans, Redis has default configurations that App Developers can change using arbitrary parameters. These are listed in the table below:

<table border="1" class="nice">
  <tr>
    <th>Property</th>
    <th>Default</th>
    <th>Options</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>maxmemory-policy</code></td>
    <td><code>allkeys-lru</code></td>
    <td><code>allkeys-lru</code>, <code>noeviction</code>, <code>volatile-lru</code>, <code>allkeys-random</code>, <code>volatile-ttl</code></td>
    <td>Sets the behavior Redis follows when `maxmemory` is reached</td>
  </tr>
  <tr>
    <td><code>notify-keyspace-events</code></td>
    <td>""</td>
    <td>Set a combination of the following characters (e.g., "Elg"): K, E, g, $, l, s, h, z, x, e, A</td>
    <td>Sets the keyspace notifications for events that affect the Redis data set</td>
  </tr>
  <tr>
    <td><code>slowlog-log-slower-than</code></td>
    <td>10000</td>
    <td>0-20000</td>
    <td>Sets the threshhold execution time (seconds). Commands that exceed this execution time are added to the slowlog.</td>
  </tr>
  <tr>
    <td><code>slowlog-max-len</code></td>
    <td>128</td>
    <td>1-2024</td>
    <td>Sets the length (count) of the slowlog queue.</td>
  </tr>
</table>

For Dedicated-VM and Shared-VM plans, Redis is configured with a `maxmemory-policy` of `no-eviction`. This policy means that the once memory is full, the service will not evict any keys and no write operations will be possible until memory becomes available.
 Persistence is configured for both RDB and AOF. The default maximum number of connections, maxclients, is set at 10000 but this number is adjusted by Redis according to the number of file handles available.
 Replication and event notification are not configured.

##  Service Plans
PCF Redis offers On-Demand, Dedicated-VM and Shared-VM plans. The memory allocated to the plans is determined by the operator at deploy time. For more information on the plans see the [architecture](./architecture.html) and [recommended usage](./recommended.html) pages.

##  <a id="using"></a>Using Redis for PCF
Instructions for creating, binding to, and deleting an instance of the On-Demand, Dedicated-VM or Shared-VM plan are [here](./using.html).

##  <a id="getting-started"></a>Getting Started

### <a id="spring"></a>Using PCF Redis with Spring
<a href="http://cloud.spring.io/spring-cloud-connectors/spring-cloud-spring-service-connector.html#_redis">Spring Cloud Connectors</a> can connect to PCF Redis. <a href="http://cloud.spring.io/spring-cloud-connectors/spring-cloud-cloud-foundry-connector.html#_redis">Spring Cloud Cloud Foundry connectors</a> will automatically connect to PCF Redis.

###  <a id="pcf-dev"></a>PCF Dev
PCF Dev is a small footprint version of PCF that's small enough to run on a local developer machine. More info here https://pivotal.io/pcf-dev.

###  <a id="example-app"></a>Redis Example App
Sample ruby code that uses PCF can be found here <a href="https://github.com/pivotal-cf/cf-redis-example-app">https://github.com/pivotal-cf/cf-redis-example-app</a>.

###  <a id="redis"></a>Redis
To learn more about Redis itself, visit <a href="http://redis.io">redis.io</a>.
