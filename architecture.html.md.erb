---
title: On-Demand Service Offering
owner: London Services
---

<strong><%= modified_date %></strong>

Redis for PCF offers On-Demand, Dedicated-VM, and Shared-VM service plans. 
This section describes the architecture, lifecycle, and configurations of the On-Demand plan, 
as well as networking information for the on-demand service. 
For similar information for the Dedicated-VM and Shared-VM plans, see [Architecture and Lifecycle for Dedicated and Shared Plans](./architecture-pp.html).


## <a id="diagram1"></a> Architecture Diagram for On-Demand Plan

This diagram shows the architecture of the service broker and On Demand plans, and how the user's app binds to a Redis instance.

![On-Demand Architecture Diagram](on-demand-arch.png)

## <a id="on-demand"></a> On-Demand Service Plans

On-Demand plans are best fit for cache use cases.

Redis for PCF offers three on-demand plans as the `p.redis` service within the PCF Redis tile. Below is a description of each plan as it appears in the cf marketplace and its intended use case.

* **Small Cache Plan**: A Redis instance deployed to a dedicated VM, suggested to be configured with ~1&nbsp;GB of memory and >3.5&nbsp;GB of persistent disk.
* **Medium Cache Plan**: A Redis instance deployed to a dedicated VM, suggested to be configured with ~2&nbsp;GB of memory and >10&nbsp;GB of persistent disk.
* **Large Cache**: A Redis instance deployed to a dedicated VM, suggested to be configured with ~4&nbsp;GB of memory and >14&nbsp;GB of persistent disk.

For each service plan, the operator can configure the **Plan name**, **Plan description**, **Server VM type** and **Server Disk type**, or choose to disable the plan completely.

### <a id="features"></a> Features of On-Demand Service Plans

* Each on-demand plan instance is deployed to its own VM and is suitable for production workloads.
* Select Redis configurations can be changed from default.
* The default `maxmemory-policy` is `allkeys-lru` and can be updated for other cache policies. 
* These plans are Operator-configured and enabled. 
* Once enabled, app developers can view the available plans in the marketplace and provision a Redis instance from that plan.
* You can disable any of the three on-demand plans in the plan's page in Ops Manager. See descriptions of the three on-demand plans [here](index.html#odb).
* The maximum number of instances is managed at by a per-plan and global quota. The maximum number of instances cannot surpass 50.
* Operators can update the plan settings, including the VM size, disk size and Redis configuration settings, after the plans have been created. **Operators should not downsize the VMs or disk size as this can cause data loss in pre-existing instances.**
* App developers can update certain Redis configurations.

### <a id="limitations"></a> Known Limitations for On-Demand Service Plans

Limitations for the On-Demand Service include:

* Operators can update certain plan settings after the plans have been created. To ensure upgrades happen across all instances, set the **upgrade instances** errand to **On**.

* If the Operator updates the VM size, disk size, or the Redis configuration settings (enabling Lua Scripting, max-clients, timeout and TCP keep-alive), these settings will be implemented in all instances already created. 

* Operators should not downsize the VMs or disk size as this can cause data loss in pre-existing instances.

* Back ups are not available for On-Demand plans.


## <a id="config"></a> Configuration for On-Demand Service Plans

For On-Demand Plans, certain Redis configurations can be set by the operator during plan configuration,
 and by the app developer during instance provisioning. Other Redis configurations cannot be changed from the default.

 + Operator configurable Redis settings include: `timeout`, `tcp-keepalive`, `maxclients` and `lua scripting`. See the Operator Guide section of this documentation for more detail.
 + App-developer configurable Redis settings include: `maxmemory-policy`, `notify-keyspace-events`,`slowlog-log-slower-than`,and `slowlog-max-len`.
   See the Application Developer Guide of this documentation for more detail.

### <a id="opnotes"></a> Operator Notes for On-Demand Service Plans

* This plan enables Redis instances to be deployed on dedicated VMs. Instances can be deployed until they reach either an opertor-set per-plan quota or global quota.
* Instances are provisioned based on the [On-Demand Services SDK](http://docs.pivotal.io/on-demand-service-broker/) and service broker adapter associated with this plan.
* `maxmemory` in `redis.conf` is set to 45% of the system memory
* Any On-Demand plan can be disabled from the plan page in Ops Manager.

## <a id="resource"></a> Resource Usage Planning for On-Demand plans

<p class="note">
Redis On-Demand plans use dedicated VMs and disks, which will consume IaaS resources. Operators can limit resource usage with Plan Quotas and a Global Quota, but resource usage will vary based on number of On-Demand instances provisioned.
</p>

If the number of on-demand instances is greater than or equal to the Global Quota set on the 'On Demand Service Settings' page, no new instances can be provisioned.

To calculate the maximum cost/ usage for each plan:

<pre>max_plan_resources = plan_quota x plan_resources</pre>

To calculate the maximum cost across plans, add together the cost/ usage for each plan, while the quotas sum to less than the global quota.

<pre>
While (plan_1_quota + plan_2_quota) â‰¤ global_quota:
max_resources = (plan_1_quota x plan_1_resources) + ( plan_2_quota x plan_2_resources)
</pre>

To calculate the current IaaS cost/ usage across On-Demand plans:

1. Current instances provisioned for all plans can be found by referencing the `total_instance` metric as [documented here](monitoring.html#usage)
1. Multiple the `total_instance` for each plan by that plan's resources. Sum all plans that are active to get your total current usage

<pre>current_usage = (plan_1_total_instances x plan_1_resources) + (plan_2_total_instances x plan_2_resources)</pre>


## <a id ="lifecycle"></a>Lifecycle for On-Demand Service Plan

Here is the lifecycle of Redis for PCF, from an operator installing the tile through an app developer using the service then an operator deleting the tile.

![On-Demand Lifecycle Diagram](Redis_timeline_demand.png)


