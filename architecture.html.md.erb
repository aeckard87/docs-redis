---
title: Redis for PCF Architecture and Lifecycle
owner: London Services
---
<br><br>
Redis for PCF offers On-Demand, Dedicated-VM, and Shared-VM plans. This section describes the architecture, lifecycle, and configurations of these plans, as well as networking information for the on-demand service.


## <a id ="architecture"></a>Redis for PCF Architecture for On-Demand Service Plan

### <a id="diagram1"></a> Architecture Diagram for On-Demand Plan

This diagram shows how the architecture of the service broker and On-Demand plans and how the user's app binds to a Redis instance.

![On-Demand Architecture Diagram](on-demand-arch.png)

### <a id="on-demand"></a> On-Demand Service Plans
* These plans are operator-configured and enabled. Once enabled, App Developers can provision a Redis instance from that plan.
* You can disable any of the three on-demand plans in the plan's page in Ops Manager. See descriptions of the three on-demand plans in the [Overview of Redis for PCF](minor-overview.html#service) topic.
* The maximum number of instances is managed at by a per-plan and global quota. The maximum number of instances cannot surpass 50.
* Operators can update the plan settings, including the VM size, disk size, and Redis configuration settings, after the plans have been created. **Operators should not downsize the VMs or disk size as this can cause data loss in pre-existing instances.**
* App Developers can update certain Redis configurations.


### <a id="config"></a> Configuration for On-Demand Service Plans

For On-Demand Plans, certain Redis configurations can be set by the operator during plan configuration,
 and by the App Developer during instance provisioning. Other Redis configurations cannot be changed from the default.

 + Operator configurable Redis settings include the following: `timeout`, `tcp-keepalive`, `maxclients`, and `lua scripting`. See the Operator Guide section of this documentation for more detail.
 + App-Developer configurable Redis settings include the following: `maxmemory-policy`, `notify-keyspace-events`, `slowlog-log-slower-than`, and `slowlog-max-len`. See the App Developer guide of this documentation for more detail.

### <a id ="lifecycle"></a>Lifecycle for On-Demand Service Plan

The image below shows the lifecycle of Redis for PCF, from an operator installing the tile, through an app developer using the service, to an operator deleting the tile.

![On-Demand Lifecycle Diagram](Redis_timeline_demand.png)


## <a id="networks"></a>On-Demand Services and Networking

### <a id="bosh2"></a>BOSH 2.0 and the Service Network

<%= partial '../../redis/odb/service_networks' %>

### <a id ="architecture_networks"></a>Default Network and Service Network

Like other on-demand PCF services, On-Demand Redis for PCF relies on the BOSH 2.0 ability to dynamically deploy VMs in a dedicated network. The on-demand service broker uses this capability to create single-tenant service instances in a dedicated service network.

<%= partial '../../redis/odb/on_demand_architecture' %>

The diagram below shows worker VMs in an on-demand service instance, such as RabbitMQ for PCF, running on a separate services network, while other components run on the default network.

![Architecture Diagram](ODB-architecture.png)

### <a id="network-rules"></a>Required Networking Rules for On-Demand Services

<%= partial '../../redis/odb/service_networks_table' %>


## <a id="arch-dedicated-shared"></a>Redis for PCF Architecture for Dedicated-VM and Shared-VM Service Plans

### <a id="diagram2"></a>Architecture Diagram for Shared and Dedicated Plans

This diagram shows how the architecture of the service broker and Shared-VM and Dedicated-VM plans and how the user's app binds to a Redis instance.

![Architecture Diagram](legacy-arch.png)


### <a id="shared-vm"></a> Shared-VM Service Plan

* This plan deploys a Redis instance inside the service broker VM.
* To disable this plan, set the `Max instances limit` on the `Shared-VM plan` tab in Ops Manager to `0`.
* You can increase the maximum number of instances from the default `5` to a value of your choosing. If you increase the number of instances that can run on this single VM, you should increase the resources allocated to the VM, in particular RAM and CPU. You can overcommit to a certain extent, but may start to see performance degradations.
* You can also increase the maximum amount of RAM allocated to each Redis process (service instance) that runs on this VM.
* If you decrease the service instance limit, any instances that run where the count is now greater than the limit are not terminated. Until the total count drops below the new limit you cannot create any new instances. For example if you had a limit of `10` with all used and reduced the limit to `8`, two instances will continue to run until you terminate them yourself.

### <a id="dedicated-vm"></a> Dedicated-VM Service Plan

* This plan deploys the operator-configured number of dedicated Redis VMs alongside the service broker VM.
* These instances are pre-provisioned during the deployment of the tile from Ops Manager into a **pool**. The VMs are provisioned and configured with a Redis process ready to be used when an instance of the Dedicated-VM plan is requested.
* A default deployment will provision `5 instances` of the Dedicated-VM plan into the **pool**. This number can be increased on the `Resource Config` tab in Ops Manager, either in the initial deployment or subsequently. The number of VMs **cannot** be decreased once deployed.
* When a user provisions an instance, it is marked as in use and taken out of the **pool**.
* When a user deprovisions an instance, the instance is cleansed of any data and configuration to restore it to a fresh state and placed back into the pool, ready to be used again.
* You can disable this plan by setting the number of instances of the `Dedicated node` job in Ops Manager to `0`.


### <a id="config2"></a> Configuration for Dedicated-VM and Shared-VM Service Plans

For Dedicated-VM and Shared-VM plans, the default Redis configurations cannot be changed. 
A sample `redis.conf` from a Dedicated-VM plan instance is provided [here] (redisconf.html).

+ Redis is configured with a `maxmemory-policy` of `no-eviction`. This policy means that when the memory is full, the service does
 not evict any keys or perform any write operations until memory becomes available.

+ Persistence is configured for both `RDB` and `AOF`.

+ The default maximum number of connections, `maxclients`, is set at 10000 but
this number is adjusted by Redis according to the number of file handles available.

+ Replication and event notification are not configured.


### <a id="lifecycle-dedicated-shared"></a>Lifecycle for Dedicated-VM and Shared-VM Service Plans

Here is the lifecycle of Redis for PCF, from an operator installing the tile, to an app developer using the service, toan operator deleting the tile.

![Lifecycle Diagram](Redis_timeline_legacy.png)

